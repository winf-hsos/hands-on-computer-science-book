# Vorwort {.unnumbered}

Gl√ºckwunsch, ihr seid angekommen! Egal, wie euer Weg hierher aussah: Ihr habt dieses Buch ge√∂ffnet. Vielleicht studiert ihr an der Hochschule Osnabr√ºck und wurdet (zu eurem Gl√ºck) dazu verpflichtet, oder ihr seid ganz bewusst hier gelandet und freut euch darauf, etwas Neues zu lernen ‚Äì genau wie ich.

Dieses Buch entstand urspr√ºnglich, um meinen Veranstaltungen an der Hochschule Osnabr√ºck eine verst√§ndliche und praxisnahe Grundlage zu geben. Es dient als Hauptlekt√ºre f√ºr meine Vorlesungen und als Nachschlagewerk f√ºr alle, die eine Sitzung verpasst haben oder Themen eigenst√§ndig vertiefen m√∂chten. Besonders willkommen sind Quereinsteiger, Wiederholer und neugierige Menschen, die bisher noch gar keinen Kontakt mit der [Hochschule Osnabr√ºck](https://hs-osnabrueck.de/ "Link zur offiziellen Webseite der Hochschule Osnabr√ºck") hatten.

Hier bekommt ihr keine trockene Theorie, sondern eine praxisnahe Einf√ºhrung in die Grundlagen moderner Computer und unserer digitalen Welt. Die wissenschaftliche Disziplin dahinter hei√üt auf Deutsch Informatik, international Computer Science. Der Titel Hands-On Computer Science verr√§t bereits, worum es geht: Es wird praktisch, und zwar von Anfang an.

## Was macht dieses Buch besonders?

Lehrb√ºcher zur Informatik gibt es reichlich. Viele sind gro√üartig, aber kaum eines passt genau zu dem, was ich mit meinen Studierenden vorhabe. Woran liegt das?

Viele klassische Informatikb√ºcher versuchen, das gesamte Fach m√∂glichst umfassend abzubilden. Das ist sinnvoll f√ºr angehende Informatikerinnen und Informatiker, aber meine Zielgruppe seid ihr: Studierende in Studieng√§ngen wie [Management nachhaltiger Ern√§hrungssysteme](https://hs-osnabrueck.de/bne), [Lebensmittelproduktion](https://www.hs-osnabrueck.de/blp) oder [Agrarsystemtechnologien](https://www.hs-osnabrueck.de/agrarsystemtechnologien-bsc/) ‚Äì oder ihr seid gar nicht an der Hochschule, sondern wollt euch einfach einen besseren Zugang zur digitalen Welt erarbeiten.

Kurz gesagt: Dieses Buch ist f√ºr alle, die in die digitale Welt eintauchen wollen, ohne sich mit komplizierten Details zu √ºberfordern. Daf√ºr braucht ihr kein allumfassendes Nachschlagewerk, sondern einen klaren roten Faden, der euch Schritt f√ºr Schritt an die grundlegenden Konzepte heranf√ºhrt. Und das wichtigste: Eine gro√üe Portion Spa√ü!

Viele B√ºcher versprechen Praxisn√§he, doch oft endet sie in n√ºchternen √úbungsaufgaben am Kapitelende. Genau hier setzt Hands-On Computer Science an und macht drei Dinge anders:

1. Ihr lernt informatische Konzepte anhand spannender Experimente mit Microcontrollern, Sensoren, Buttons, LEDs und Displays.
2. Wir f√ºhren wichtige Konzepte fr√ºh ein, gehen aber erst nach und nach ins Detail und wiederholen sie regelm√§√üig.
3. Theorie und Praxis sind nicht getrennt, sondern eng miteinander verbunden ‚Äì Programmieren und informatische Grundlagen lernt ihr gleichzeitig.

## Hands-On Programmieren lernen

Hast du dich schon einmal gefragt, wie man Informationen √ºber Licht √ºbertragen kann? Oder wie man mit Licht den Puls messen kann? Oder wie man mit zwei einfachen Kabeln einen Wasserstandssensor baut? Das alles klingt vielleicht weit hergeholt, ist aber tats√§chlich machbar ‚Äì und wie genau, das wollen wir in diesem Buch herausfinden! Dabei werden wir nicht nur die digitale Welt der Computer und Programmierung kennenlernen, sondern auch mit spannenden Ger√§ten in der analogen Welt arbeiten. 

In jedem Kapitel f√ºhren wir ein neues Experiment durch und verwenden andere Ger√§te, die uns unterschiedliche Facetten der digitalen Welt n√§herbringen. Gleichzeitg k√∂nnen wir dar√ºber das Programmieren spielerisch erlernen. Wenn alles gut l√§uft, merkt ihr kaum, wie schnell ihr das alles gelernt habt.

Hier mal ein √úberblick √ºber die Ger√§te, mit denen wir gemeinsam experimentieren werden. Zusammen kosten alle Komponenten ca. 249 ‚Ç¨. Aber keine Sorge: Wenn du das Buch im Rahmen meines Moduls ‚ÄûDigitalisierung und Programmierung‚Äú an der Hochschule Osnabr√ºck liest, erh√§ltst du f√ºr die Zeit des gesamten Semesters ein komplettes Hardware-Kit umsonst.

| Was? | Bauteil | Anzahl | Preis pro St√ºck |
|--------------------|------------------|------------------|------------------|
| Bunte LED | [RGB LED Bricklet 2.0](https://www.tinkerforge.com/de/shop/rgb-led-v2-bricklet.html) | 1 | 8 ‚Ç¨ |
| Drehknopf mit Z√§hlerfunktion | [Rotary Encoder Bricklet](https://www.tinkerforge.com/de/shop/bricklets/rotary-encoder-bricklet.html) | 1 | 8 ‚Ç¨ |
| Infrarot-Entfernungsmesser | [Distance IR 4-30cm Bricklet 2.0](https://www.tinkerforge.com/de/shop/distance-ir-4-30cm-v2-bricklet.html) | 1 | 20 ‚Ç¨ |
| OLED Display | [OLED 128x64 Bricklet](https://www.tinkerforge.com/de/shop/oled-128x64-bricklet.html) | 1 | 25 ‚Ç¨ |
| Button mit integrierter, bunter LED | [RGB LED Button Bricklet](https://www.tinkerforge.com/de/shop/bricklets/rgb-led-button-bricklet.html) | 1 | 15 ‚Ç¨ |
| Licht- und Farbsensor | [Color Bricklet 2.0](https://www.tinkerforge.com/de/shop/color-v2-bricklet.html) | 1 | 17 ‚Ç¨ |
| Piezo Lautsprecher | [Piezo Speaker Bricklet 2.0](https://www.tinkerforge.com/de/shop/piezo-speaker-v2-bricklet.html) | 1 | 19 ‚Ç¨ |
| Analoger Spannungssensor | [Analog In Bricklet 3.0](https://www.tinkerforge.com/de/shop/analog-in-v3-bricklet.html) | 1 | 14 ‚Ç¨ |
| Schalldruckpegelsenor | [Sound Pressure Level Bricklet](https://www.tinkerforge.com/de/shop/sound-pressure-level-bricklet-679.html) | 1 | 35 ‚Ç¨ |
| Mikrocontroller | [Master Brick 3.2](https://www.tinkerforge.com/de/shop/master-brick.html) | 2 | 35 ‚Ç¨ |
| Anschlusskabel 15 cm | [Bricklet Kabel 15cm (7p-7p)](https://www.tinkerforge.com/de/shop/accessories/cable/bricklet-cable-15cm-7p-7p.html) | 8 | 1 ‚Ç¨ |
| USB-A- auf USB-C Kabel | [USB-A auf USB-C Kabel 100 cm](https://www.tinkerforge.com/de/shop/accessories/cable/usb-a-to-usb-c-cable-100cm.html) | 1 | 6 ‚Ç¨ |
| Montageplatte | [Montageplatte 22x22 (12x12cm)](https://www.tinkerforge.com/de/shop/mounting-plate-22x22-with-cable-lead-through.html) | 2 | 7 ‚Ç¨ |
| Schrauben, Abstandshalter und Muttern | [Befestigungskit 12mm](https://www.tinkerforge.com/de/shop/accessories/mounting/mounting-kit-12mm.html) | 4 | 2 ‚Ç¨ |

## Spannende Experimente

Kapitel f√ºr Kapitel werden wir an unterschiedlichen Experimenten arbeiten. Dabei lernt ihr nicht nur, wie man Hardware-Komponenten miteinander verbindet, sondern vor allem auch, wie man Computer ‚Äì diese universellen Probleml√∂sungsmaschinen ‚Äì f√ºr eigene Ideen und L√∂sungen programmieren kann. Hier ist der √úberblick, welche Experimente euch in diesem Buch erwarten:

| Kapitel | Experiment(e) |
|----------------|--------------------------------------------------------|
| @sec-colors | Wir lassen eine LED einen Regenbogenfarbverlauf √ºber die Zeit erzeugen. |
| @sec-numbers | Wir entwickeln einen Dimmer f√ºr die LED, der √ºber einen Drehknopf gesteuert wird. |
| @sec-text | Wir lernen, wie man Texte ganz ohne Tastatur eingeben kann ‚Äì √ºber Handgesten. |
| @sec-images | Wir verbinden Tabellenkalkulation mit Bildern und Displays |

<!--
| @sec-c | Wir lernen Morse-Code und wie wir diesen √ºber einen Lautsprecher ausgeben k√∂nnen. |
| @sec-conversion | Wir verwenden einfache Kippschalter, um analoge Werte in digitale Werte umzuwandeln. |
| @sec-information |  |
| @sec-sensors | Wir bauen einen Wasserstandssensor mit einem analogen Spannungssensor. |
| @sec-signals | Wir basteln einen Pulsmesser aus einem Farbsensor üíì |
| @sec-protocols | Wir √ºbertragen Nachrichten √ºber Lichtsignale üî¶ |
| @sec-encryption | Wir verstecken geheime Botschaften in harmlosen Nachrichten üïµÔ∏è‚Äç‚ôÄÔ∏è |
| @sec-algorithms |  |
| @sec-compression | Wir entwickeln ein Verfahren, um Information zu komprimieren. |
| @sec-computer | Wir entwickeln eine Rechenmaschine, die zwei Bytes addieren kann, mit nur einem einem Bauteil. |
| @sec-problems |  |
-->

## Frust ist dein Freund ‚Äì zumindest ein bisschen

Eins m√∂chte ich gleich vorwegnehmen: Beim Programmierenlernen ist eine gewisse Portion Frust unvermeidbar. Klingt unangenehm? Ist es auch! Aber es ist zugleich Teil eines enorm wertvollen Lernprozesses. Jeder Fehler, den du machst, ist eine Gelegenheit, um zu verstehen, wie Computer wirklich funktionieren ‚Äì n√§mlich absolut pr√§zise und ohne jede Toleranz f√ºr Fehler.

Computer sind gnadenlose Lehrer. Sie zeigen dir sofort und unerbittlich, wenn etwas nicht stimmt ‚Äì sei es ein vergessener Punkt, ein falscher Buchstabe oder ein simpler Zahlendreher. Das kann frustrieren, aber genau dieses direkte und sofortige Feedback hilft dir auch, schnell und effektiv zu lernen. Sobald du verstehst, wie du aus Fehlermeldungen sinnvolle Schl√ºsse ziehst und deine Programme entsprechend korrigierst, wirst du belohnt ‚Äì mit Erfolgserlebnissen und einer steilen Lernkurve.

![Ein frustrierter Frosch](images/longbite_frustrated.png){#fig-chimp-frustrated fig-align="left" width="60%"}

Also, wenn mal etwas nicht klappt: Nimm es nicht pers√∂nlich, sondern sieh es als Herausforderung. Atme tief durch, mach dir klar, dass Fehler unvermeidbar und sogar wichtig sind, und probier es noch einmal. Ich verspreche dir: Es lohnt sich!

## B√ºcher, die ich euch empfehle

Auch wenn dieses Buch f√ºr sich einzigartig ist, habe ich mich nat√ºrlich von anderen Autoren und deren Werken inspirieren lassen. Einige davon m√∂chte ich euch hier vorstellen.

- **Code: The Hidden Language of Computer Hardware and Software** von Charles Petzold: Ein Klassiker, der die Grundlagen der Informatik und Computertechnik auf verst√§ndliche Weise erkl√§rt. Petzold beginnt mit einfachen Konzepten und f√ºhrt den Leser Schritt f√ºr Schritt zu komplexeren Themen. Bis ihr schlie√ülich einen Computer gedanklich nachgebaut habt.

- **Abenteuer Informatik** von Jens Gallenbacher.

- **Computer Science: An Overview** von J. Glenn Brookshear und Dennis Brylow: Ein umfassendes Lehrbuch, das viele Aspekte der Informatik abdeckt. Es ist gut strukturiert und bietet eine solide Grundlage f√ºr das Verst√§ndnis der Disziplin.

- **The Way Things Work** von David Macaulay: Ein gro√üartiges Buch, das auf unterhaltsame Weise erkl√§rt, wie verschiedene Technologien funktionieren. Der Teil "The Digital Domain" adressiert viele Konzepte, die auch in diesem Buch vorkommen. Die Einteilung in "Making Bits", "Storing Bits", "Processing Bits" und "Sending Bits" hat die Struktur meines Buches beeinflusst.

## Tipps f√ºr die Lekt√ºre

Weil es in diesem Buch viel ums Programmieren geht, findet ihr viele Codebl√∂cke und Code-Snippets. Als Einstiegssprache verwenden wir Python. Warum ausgerechnet Python? Weil Python zum einen in der Praxis sehr beliebt und wei verbreitet ist. Zum anderen ist Python eine der am einfachsten zu erlernenden Programmiersprachen. Die Syntax ist klar und √ºbersichtlich, und es gibt viele Ressourcen und Bibliotheken, die den Einstieg erleichtern.

Codebl√∂cke sind deutlich vom √ºbrigen Text abgehoben, grau hinterlegt und in einer Schreibmaschinenschrift dargestellt, etwa Courier New oder Consolas. Hier ein kleines Beispiel:

```{python}
led.set_rgb_value(0, 0, 0) # <1>
led.set_rgb_value(255, 255, 255) # <2>

print("Diese Zeile hat keine Annotation")

# Lasse die LED blau aufleuchten # <3>
led.set_rgb_value(0, 0, 255)
```
1. Schaltet die LED aus, weil der RGB-Code (0, 0, 0) die Farbe Schwarz ergibt.
2. Schaltet die LED auf wei√ües Licht, weil dreimal 255 die Farbe Wei√ü ergibt.
3. Auch Kommentare sind f√ºr kurze Erl√§uterungen n√ºtzlich.

Die Annotationen sind mit einer kleinen Zahl versehen. Wenn ihr das Buch online lest und mit der Maus √ºber diese Zahl fahrt, erscheint ein Tooltip, der die jeweilige Codezeile erkl√§rt. Das funktioniert nur online, nicht in der PDF- oder Druckversion. Dort sind die Erl√§uterungen unter dem Codeblock aufgef√ºhrt.

Weil wir in jedem Kapitel ein Programm Schritt f√ºr Schritt entwickeln und es dadurch immer l√§nger wird, lasse ich gelegentlich Stellen im Code weg, um den Fokus auf neu hinzugekommene Zeilen zu legen. Diese Auslassungen markiere ich in den Codebl√∂cken mit drei Punkten (`...`). Keine Sorge: Den gesamten Code findet ihr stets am Ende eines Abschnitts. Au√üerdem liegt jedes Programm im zu diesem Buch geh√∂rigen GitHub-Repository unter:

<https://github.com/winf-hsos/hands-on-computer-science-code>

Noch ein Tipp: Wenn ihr mit der Maus √ºber einen Codeblock fahrt, erscheint rechts oben ein Clipboard-Symbol. Ein Klick darauf kopiert den Code direkt in eure Zwischenablage, und ihr k√∂nnt ihn anschlie√üend in euer ge√∂ffnetes Visual Studio Code oder eine andere IDE einf√ºgen und ausprobieren. In der Online-Version lassen sich manche Codebl√∂cke einklappen, damit ihr weniger scrollen m√ºsst.

Alles klar? Dann machen wir uns startklar f√ºr die Experimente! Dazu m√ºssen wir ein paar Dinge auf unserem Rechner installieren.
# Vorwort {.unnumbered}

Gl√ºckwunsch, ihr seid angekommen! Egal, wie euer Weg hierher aussah: Ihr habt dieses Buch ge√∂ffnet ‚Äì und damit den ersten Schritt getan. Vielleicht studiert ihr an der Hochschule Osnabr√ºck und seid im Modul dabei, vielleicht seid ihr aus Neugier hier. So oder so: Willkommen!

Dieses Buch ist aus meiner Lehrpraxis an der Hochschule Osnabr√ºck entstanden. Es dient als Hauptlekt√ºre in meinen Veranstaltungen, als Nachschlagewerk f√ºr verpasste Sitzungen und als kompakte, praxisnahe Einf√ºhrung f√ºr alle, die sich eigenst√§ndig in die digitale Welt einarbeiten wollen. Die wissenschaftliche Disziplin dahinter hei√üt auf Deutsch Informatik, international Computer Science. Der Titel Hands-On Computer Science verr√§t schon den Ansatz: Wir lernen praktisch ‚Äì von Anfang an.

## F√ºr wen ist dieses Buch gedacht?

Lehrb√ºcher zur Informatik gibt es viele. Doch nicht jedes passt zu dem, was ich mit meinen Studierenden erreichen m√∂chte. Meine Zielgruppe seid ihr:

- Studierende aus Studieng√§ngen wie [Management nachhaltiger Ern√§hrungssysteme](https://hs-osnabrueck.de/bne), [Lebensmittelproduktion](https://www.hs-osnabrueck.de/blp) oder [Agrarsystemtechnologien](https://www.hs-osnabrueck.de/agrarsystemtechnologien-bsc/).
- Quereinsteiger:innen, Wiederholer:innen und neugierige Menschen ‚Äì auch ohne Bezug zur [Hochschule Osnabr√ºck](https://hs-osnabrueck.de/ "Link zur offiziellen Webseite der Hochschule Osnabr√ºck").

Kurz gesagt: Dieses Buch ist f√ºr alle, die in die digitale Welt eintauchen wollen, ohne sich in Details zu verlieren. Ihr braucht keinen dicken W√§lzer, sondern einen roten Faden, der euch Schritt f√ºr Schritt zu den grundlegenden Konzepten f√ºhrt ‚Äì mit Spa√ü und Erfolgserlebnissen.

## Was macht dieses Buch anders?

Viele B√ºcher versprechen Praxisn√§he, enden aber in abstrakten √úbungen am Kapitelende. Hier gehen wir es anders an:

1. Ihr entdeckt informatische Konzepte √ºber Experimente mit Microcontrollern, Sensoren, Buttons, LEDs und Displays.
2. Wichtige Ideen f√ºhren wir fr√ºh ein, vertiefen sie nach und nach und wiederholen sie regelm√§√üig.
3. Theorie und Praxis geh√∂ren zusammen: Ihr lernt Programmieren und Informatik-Grundlagen gleichzeitig.

## So lernen wir: Hands-on von Anfang an

Habt ihr euch schon einmal gefragt, wie man Informationen mit Licht √ºbertr√§gt? Wie man mit Licht den Puls messen kann? Oder wie man mit zwei einfachen Kabeln einen Wasserstandssensor baut? Genau solche Fragen beantworten wir ‚Äì nicht nur theoretisch, sondern praktisch.

In jedem Kapitel erproben wir ein neues Experiment und lernen dabei eine Facette der digitalen Welt kennen. Gleichzeitig w√§chst euer Programmierwissen organisch mit. Wenn alles gut l√§uft, merkt ihr kaum, wie schnell ihr vorankommt.

## Experimente im √úberblick

Kapitel f√ºr Kapitel arbeitet ihr an Experimenten, die Hardware und Software verbinden. Dabei geht es um mehr als das Zusammenschrauben von Komponenten: Ihr lernt, Computer als universelle Probleml√∂sungsmaschinen zu nutzen ‚Äì f√ºr eure eigenen Ideen.

| Kapitel | Experiment(e) |
|----------------|--------------------------------------------------------|
| @sec-colors | Wir lassen eine LED einen Regenbogenfarbverlauf √ºber die Zeit erzeugen. |
| @sec-numbers | Wir entwickeln einen Dimmer f√ºr die LED, der √ºber einen Drehknopf gesteuert wird. |
| @sec-text | Wir lernen, wie man Texte ganz ohne Tastatur eingeben kann ‚Äì √ºber Handgesten. |
| @sec-images | Wir verbinden Tabellenkalkulation mit Bildern und Displays |

<!--
| @sec-c | Wir lernen Morse-Code und wie wir diesen √ºber einen Lautsprecher ausgeben k√∂nnen. |
| @sec-conversion | Wir verwenden einfache Kippschalter, um analoge Werte in digitale Werte umzuwandeln. |
| @sec-information |  |
| @sec-sensors | Wir bauen einen Wasserstandssensor mit einem analogen Spannungssensor. |
| @sec-signals | Wir basteln einen Pulsmesser aus einem Farbsensor üíì |
| @sec-protocols | Wir √ºbertragen Nachrichten √ºber Lichtsignale üî¶ |
| @sec-encryption | Wir verstecken geheime Botschaften in harmlosen Nachrichten üïµÔ∏è‚Äç‚ôÄÔ∏è |
| @sec-algorithms |  |
| @sec-compression | Wir entwickeln ein Verfahren, um Information zu komprimieren. |
| @sec-computer | Wir entwickeln eine Rechenmaschine, die zwei Bytes addieren kann, mit nur einem einem Bauteil. |
| @sec-problems |  |
-->

## Die Hardware: unser Experimentier‚ÄëSet

Hier seht ihr die Ger√§te, mit denen wir experimentieren. Zusammen kosten alle Komponenten ca. 249 ‚Ç¨. Keine Sorge: Wenn ihr dieses Buch im Rahmen meines Moduls ‚ÄûDigitalisierung und Programmierung‚Äú an der Hochschule Osnabr√ºck nutzt, erhaltet ihr f√ºr die Zeit des Semesters ein komplettes Hardware‚ÄëKit kostenlos.

| Was? | Bauteil | Anzahl | Preis pro St√ºck |
|--------------------|------------------|------------------|------------------|
| Bunte LED | [RGB LED Bricklet 2.0](https://www.tinkerforge.com/de/shop/rgb-led-v2-bricklet.html) | 1 | 8 ‚Ç¨ |
| Drehknopf mit Z√§hlerfunktion | [Rotary Encoder Bricklet](https://www.tinkerforge.com/de/shop/bricklets/rotary-encoder-bricklet.html) | 1 | 8 ‚Ç¨ |
| Infrarot-Entfernungsmesser | [Distance IR 4-30cm Bricklet 2.0](https://www.tinkerforge.com/de/shop/distance-ir-4-30cm-v2-bricklet.html) | 1 | 20 ‚Ç¨ |
| OLED Display | [OLED 128x64 Bricklet](https://www.tinkerforge.com/de/shop/oled-128x64-bricklet.html) | 1 | 25 ‚Ç¨ |
| Button mit integrierter, bunter LED | [RGB LED Button Bricklet](https://www.tinkerforge.com/de/shop/bricklets/rgb-led-button-bricklet.html) | 1 | 15 ‚Ç¨ |
| Licht- und Farbsensor | [Color Bricklet 2.0](https://www.tinkerforge.com/de/shop/color-v2-bricklet.html) | 1 | 17 ‚Ç¨ |
| Piezo Lautsprecher | [Piezo Speaker Bricklet 2.0](https://www.tinkerforge.com/de/shop/piezo-speaker-v2-bricklet.html) | 1 | 19 ‚Ç¨ |
| Analoger Spannungssensor | [Analog In Bricklet 3.0](https://www.tinkerforge.com/de/shop/analog-in-v3-bricklet.html) | 1 | 14 ‚Ç¨ |
| Schalldruckpegelsensor | [Sound Pressure Level Bricklet](https://www.tinkerforge.com/de/shop/sound-pressure-level-bricklet-679.html) | 1 | 35 ‚Ç¨ |
| Mikrocontroller | [Master Brick 3.2](https://www.tinkerforge.com/de/shop/master-brick.html) | 2 | 35 ‚Ç¨ |
| Anschlusskabel 15 cm | [Bricklet Kabel 15cm (7p-7p)](https://www.tinkerforge.com/de/shop/accessories/cable/bricklet-cable-15cm-7p-7p.html) | 8 | 1 ‚Ç¨ |
| USB-A-auf-USB-C-Kabel | [USB-A auf USB-C Kabel 100 cm](https://www.tinkerforge.com/de/shop/accessories/cable/usb-a-to-usb-c-cable-100cm.html) | 1 | 6 ‚Ç¨ |
| Montageplatte | [Montageplatte 22x22 (12x12cm)](https://www.tinkerforge.com/de/shop/mounting-plate-22x22-with-cable-lead-through.html) | 2 | 7 ‚Ç¨ |
| Schrauben, Abstandshalter und Muttern | [Befestigungskit 12mm](https://www.tinkerforge.com/de/shop/accessories/mounting/mounting-kit-12mm.html) | 4 | 2 ‚Ç¨ |

## So nutzt ihr dieses Buch am besten

Weil es hier viel ums Programmieren geht, findet ihr zahlreiche Codebeispiele. Wir verwenden als Einstiegssprache Python. Warum Python? Weil es in der Praxis weit verbreitet ist, eine klare, leicht lesbare Syntax hat und viele n√ºtzliche Bibliotheken den Einstieg erleichtern.

Codebl√∂cke sind im Text deutlich abgesetzt (grau hinterlegt, Schreibmaschinenschrift). Ein Beispiel mit Annotationen:

```{python}
led.set_rgb_value(0, 0, 0) # <1>
led.set_rgb_value(255, 255, 255) # <2>

print("Diese Zeile hat keine Annotation")

# Lasse die LED blau aufleuchten # <3>
led.set_rgb_value(0, 0, 255)
```
1. Schaltet die LED aus, weil der RGB-Code (0, 0, 0) die Farbe Schwarz ergibt.
2. Schaltet die LED auf wei√ües Licht, weil dreimal 255 die Farbe Wei√ü ergibt.
3. Auch Kommentare sind f√ºr kurze Erl√§uterungen n√ºtzlich.

Wenn ihr das Buch online lest, erscheinen zu den kleinen Ziffern im Code beim Dar√ºberfahren Tooltips mit Erkl√§rungen. In der PDF- oder Druckversion stehen die Erl√§uterungen unter dem Codeblock.

Damit der Fokus beim schrittweisen Entwickeln auf den neuen Teilen liegt, lasse ich gelegentlich Abschnitte im Code aus und markiere das mit drei Punkten (`...`). Den vollst√§ndigen Code findet ihr am Ende eines Abschnitts und im GitHub‚ÄëRepository zum Buch:

<https://github.com/winf-hsos/hands-on-computer-science-code>

Noch ein Tipp: Wenn ihr mit der Maus √ºber einen Codeblock fahrt, erscheint rechts oben ein Clipboard‚ÄëSymbol. Ein Klick darauf kopiert den Code in eure Zwischenablage ‚Äì ideal, um ihn in Visual Studio Code oder eine andere IDE einzuf√ºgen. In der Online‚ÄëVersion lassen sich manche Codebl√∂cke einklappen, damit ihr weniger scrollen m√ºsst.

## Fehler als Lernmotor: Frust geh√∂rt dazu

Eins vorweg: Beim Programmierenlernen ist Frust normal ‚Äì und n√ºtzlich. Computer sind pr√§zise, gnadenlose Lehrer. Ein vergessener Punkt, ein Buchstabe zu viel, ein Zahlendreher: Sofort gibt es Feedback. Das kann nerven, beschleunigt aber euren Lernprozess enorm. Sobald ihr Fehlermeldungen als Hinweise versteht und gezielt damit umgeht, kommen die Erfolgserlebnisse schnell.

![Ein frustrierter Frosch](images/longbite_frustrated.png){#fig-chimp-frustrated fig-align="left" width="60%"}

Wenn etwas nicht klappt: Atmet durch, nehmt es nicht pers√∂nlich und versucht es erneut. Fehler sind unvermeidbar ‚Äì und wichtig. Es lohnt sich!

## Empfehlenswerte B√ºcher

Auch wenn dieses Buch einen eigenen Weg geht, haben mich andere Werke inspiriert:

- Code: The Hidden Language of Computer Hardware and Software von Charles Petzold: Ein Klassiker, der von einfachen Konzepten schrittweise zu komplexeren Themen f√ºhrt ‚Äì bis ihr gedanklich einen Computer nachgebaut habt.
- Abenteuer Informatik von Jens Gallenbacher.
- Computer Science: An Overview von J. Glenn Brookshear und Dennis Brylow: Ein umfassendes Lehrbuch mit breitem √úberblick und klarer Struktur.
- The Way Things Work von David Macaulay: Erkl√§rt Technologien unterhaltsam. Der Teil ‚ÄûThe Digital Domain‚Äú mit den Abschnitten ‚ÄûMaking Bits‚Äú, ‚ÄûStoring Bits‚Äú, ‚ÄûProcessing Bits‚Äú und ‚ÄûSending Bits‚Äú hat die Struktur dieses Buches beeinflusst.

## Auf geht‚Äôs

Alles klar? Dann machen wir uns startklar f√ºr die Experimente! Dazu m√ºssen wir ein paar Dinge auf unserem Rechner installieren.
---
abstract: |
    Wir starten direkt mit dem ersten Experiment und lernen, wie wir einen einfachen Button programmieren k√∂nnen. Vielleicht schaffen wir es sogar, ein einfaches Spiel zu erstellen?
abstract-title: ""
---

# An oder Aus {#sec-on-or-off}

## Experimentaufbau

F√ºr unser Experiment in diesem Kapitel ben√∂tigen wir den Button mit der integrierten LED ([RGB LED Button 2.0](https://www.tinkerforge.com/de/shop/bricklets/rgb-led-button-bricklet.html)), den wir an den Mikrocontroller ([Master Brick 3.2](https://www.tinkerforge.com/de/shop/master-brick.html)) anschlie√üen. Beides fixieren wir auf Abstandshaltern auf einer Montageplatte, wie in @fig-setup-rgb-led-button gezeigt. Damit es schneller geht, verwenden wir lediglich zwei Fixierungen pro Ger√§t, was eine ausreichende Stabilit√§t gew√§hrleistet. Vergiss nicht die wei√üen Unterlegscheiben aus Kunsstoff, um die Platinen zu schonen.

::: {layout="[[1]]"}

![Einfaches Setup mit Mikrocontroller und Button mit integrierter LED.](images/setup_rgb_led_button.jpg){#fig-setup-rgb-led-button}

:::

## Einfacher geht es nicht

Ein Button ist ein denkbar einfaches Ger√§t: Es kennt nur zwei Zust√§nde, entweder ist der Button gedr√ºckt oder nicht. Wenn du den Master Brick √ºber das USB-Kabel an deinen Computer angeschlossen hast, kannst du die Funktion des Buttons einfach √ºber den Brick Viewer kennenlernen. √ñffne dazu den Brick Viewer und klicke auf den Connect-Button.

![√úber den Connect-Button verbindet sich der Brick Viewer mit dem angeschlossenen Master Brick.](images/brick_viewer_connect.png){#fig-brick-viewer-connect .lightbox fig-align="center" width="100%" group="brick-viewer"}

Nachdem du verbunden bist sollte der angeschlossene Master Brick mit seinen Komponenten, die Bricklets genannt werden, im Brick Viewer sichtbar sein. In @fig-brick-viewer-after-connect siehst du wie das in meinem Fall aussieht. F√ºr jedes Ger√§t wird ein eigener Tab angezeigt, in dem wir die Details zu diesem Ger√§t sehen und die jeweiligen Funktionen ausprobieren k√∂nnen. Gleichzeitig bekommen wir in der Mitte des Brick Viewers eine √ºbersichtliche Liste mit allen gefundenen Ger√§ten angezeigt. Durch die hierarchische Darstellung erkennst du, welches Bricklet an welchem Mikrocontroller (Master Brick) h√§ngt. Wie wir sp√§ter im Buch noch sehen werden k√∂nnen auch mehrer Master Bricks miteinander verbunden werden und somit die m√∂glichen angeschlossenen Bricklets um vier erweitert werden.

![Der Brick Viewer nachdem ihr mit dem Master Brick verbunden seid.](images/brick_viewer_after_connect.png){#fig-brick-viewer-after-connect .lightbox group="brick-viewer"}

Wechseln wir in den Tab f√ºr den Button, in dem wir s√§mtliche Funktionen des Bricklets einsehen und interaktive ausprobieren k√∂nnen.

![Die Ansicht f√ºr den RGB LED Button im Brick Viewer, in der alle Funktionen per Klick im Zugriff sind.](images/brick_viewer_rgb_led_button.png){#fig-brick-viewer-rgb-led-button .lightbox group="brick-viewer"}

## Das Ganze jetzt in Python

### Der virtuelle Button im Code

Wie versprochen starten wir direkt mit unserem ersten kleinen Python-Programm:

```{python}
from tinkerforge.ip_connection import IPConnection # <1>
from tinkerforge.bricklet_rgb_led_button import BrickletRGBLEDButton # <2>

ipcon = IPConnection() # <3>
ipcon.connect("localhost", 4223) # <4>
btn = BrickletRGBLEDButton("Ds3", ipcon) # <5>
```

1.  Importieren des Objekts zum Herstellen einer Verbindung mit dem Master Brick.
2.  Importieren des Objekts zur Darstellung des Buttons als Python-Objekt.
3.  Eine neue Instanz einer IP-Verbindung erstellen.
4.  Eine Verbindung zu angeschlossenen Master Brick herstellen.
5.  Eine virtuelle Instanz des RGB LED Button Bricklets in unserem Programm erzeugen.

### Bibliotheken

Den Codeauschnitt oben wird uns im Verlauf dieses Buches immer wieder begegnen. Ganz oben, in den ersten beiden Zeilen, importieren wir die f√ºr unser Programm ben√∂tigten Objekte aus der Tinkerforge-Bibliothek. Eine Bibliothek\index{Bibliothek} in einer Programmiersprache ist die B√ºndelung und Bereitstellung von Funktionen, Klassen oder Konstanten, damit andere sie in ihren Programmen nutzen k√∂nnen. Da Tinkerforge Interesse daran hat, dass ihre Bauteile von m√∂glichst vielen Menschen m√∂glichst einfach genutzt werden k√∂nnen, stellen sie neben vielen anderen Programmiersprachen auch eine Python-Version ihrer Bibliothek zur Verf√ºgung. Im Codeausschnitt oben laden wir zuerst das Objekt f√ºr die Verbindung zum angeschlossenen Mikrocontroller, die √ºber eine IP-Verbindung hergestellt wird. Was das genau ist? Sp√§ter mehr dazu. Zus√§tzlich zur `IPConnection` laden wir anschlie√üend noch die ben√∂tigen Klassen f√ºr die Ger√§te, die wir in unserem aktuellen Setup verwenden wollen. In diesem Kapitel ist das nur der Button mit integrierter LED.

The concept of a switch with its two states is very important to the field of computer science. That's why introduce it early in this book.

-   Introduce the dual button
-   Introduce the boilerplate code necessary to connect to the button
-   As as side note, introduce programs and how to write and run them with VS code
-   Show how we can either press the button or not and how to read its current state from our first simple program
-   Leave the chapter with some intriguing questions about the meaning of 0 and 1 in computer science

üéÆ Mini Reaction Game

Theme: "Are you faster than a computer?"

**Setup:**

-   Flash an LED randomly after a delay, and students must press the correct button as fast as possible.
-   Wrong button or slow response ‚Üí ‚Äúfail‚Äù message.
-   Display or rank response times.

Teachable moment: Real-time input processing, event handling, and how computers handle asynchronous input.

üß† Bonus Concept: Binary Memory Challenge

Theme: "Simon Says: Binary Edition"

**Setup:**

-   System shows a sequence of binary numbers via LED flashes (e.g., 01 ‚Üí left off, right on).
-   Students must repeat the sequence by pressing the buttons.
-   Each round adds another number.

Teachable moment: Binary perception, memory, encoding sequences, and reinforcing input logic.

![Ein Schimpanse der gleich auf den Buzzer haut](images/chimp_buzzer.jpg){#fig-chimp-buzzer}
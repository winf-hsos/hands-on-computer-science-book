[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hands-On Computer Science",
    "section": "",
    "text": "Vorwort\nGlückwunsch – du bist angekommen! Wie auch immer dein Weg hierher aussah, du hast es geschafft, dieses Buch zu öffnen. Vielleicht bist du Student oder Studentin an der Hochschule Osnabrück und wurdest (zu deinem Glück) gezwungen, oder du bist ganz bewusst hier gelandet und freust dich darauf, etwas Neues zu lernen – genau wie ich.\nDieses Buch entstand ursprünglich, um meinen Veranstaltungen an der Hochschule Osnabrück eine verständliche und praxisnahe Grundlage zu geben. Es dient als Hauptlektüre für meine Vorlesungen, aber auch als Nachschlagewerk für alle, die vielleicht mal eine Sitzung verpasst haben oder Themen eigenständig vertiefen wollen. Besonders willkommen sind dabei Quereinsteiger, Wiederholer oder einfach neugierige Menschen, die bisher noch gar keinen Kontakt mit der Hochschule Osnabrück hatten.\nHier bekommst du keine trockene Theorie präsentiert, sondern eine spannende, praxisnahe Einführung in die Grundlagen moderner Computer und unserer digitalen Welt. Das Fach, das sich dahinter verbirgt, heißt auf Deutsch Informatik, international auch bekannt als Computer Science. Der Titel Hands-On Computer Science verrät bereits: Hier wird es praktisch – und zwar von Anfang an.",
    "crumbs": [
      "Vorwort"
    ]
  },
  {
    "objectID": "index.html#was-macht-dieses-buch-besonders",
    "href": "index.html#was-macht-dieses-buch-besonders",
    "title": "Hands-On Computer Science",
    "section": "Was macht dieses Buch besonders?",
    "text": "Was macht dieses Buch besonders?\nLehrbücher zur Informatik gibt es reichlich. Viele davon sind großartig, aber kaum eines passt perfekt zu dem, was ich mit meinen Studierenden vorhabe. Woran liegt das?\nViele klassische Informatikbücher versuchen, das gesamte Fachgebiet möglichst umfassend abzubilden. Das ist sinnvoll für angehende Informatiker, aber meine Zielgruppe bist du: Studierende in Studiengängen wie Management nachhaltiger Ernährungssysteme, Lebensmittelproduktion oder kAgrarsystemtechnologien – oder vielleicht bist du nicht mal Student oder Studentin, sondern einfach interessiert daran, endlich Zugang zur digitalen Welt zu finden.\nKurz gesagt: Dieses Buch ist für jeden gedacht, der Lust hat, in die digitale Welt einzutauchen, ohne sich gleich mit komplizierten Details zu überfordern. Dafür brauchst du kein allumfassendes Nachschlagewerk, sondern einen klaren roten Faden, der dich Schritt für Schritt an die grundlegenden Konzepte heranführt.\nViele Bücher versprechen Praxisnähe, doch oft endet diese in nüchternen Übungsaufgaben am Kapitelende. Genau hier setzt Hands-On Computer Science an und macht zwei Dinge anders:\n\nDu lernst informatische Konzepte direkt anhand spannender Projekte mit Hardware wie Microcontrollern, Sensoren, Buttons, LEDs und Displays kennen.\nDu arbeitest kontinuierlich am LiFi-Projekt, das dich durch alle Kapitel begleitet und dabei immer weiter wächst.\nTheorie und Praxis sind nicht getrennt, sondern eng miteinander verbunden – Programmieren und informatische Grundlagen lernst du gleichzeitig.\n\nSchon ab Kapitel 1 beginnst du zu programmieren und zwar nicht abstrakt, sondern konkret mit Bauteilen wie Buttons. Im Laufe des Buches lernst du Schritt für Schritt neue Hardware-Komponenten kennen, die immer direkt mit relevanten informatischen Konzepten verknüpft sind. So schließt du am Ende nicht nur das LiFi-Projekt erfolgreich ab, sondern verfügst fast nebenbei über ein solides Fundament in der Informatik. Wenn alles gut läuft, merkst du kaum, wie schnell du gelernt hast.",
    "crumbs": [
      "Vorwort"
    ]
  },
  {
    "objectID": "index.html#tipps-für-die-lektüre",
    "href": "index.html#tipps-für-die-lektüre",
    "title": "Hands-On Computer Science",
    "section": "Tipps für die Lektüre",
    "text": "Tipps für die Lektüre\nWeil es in diesem Buch viel ums Programmieren geht, findest du natürlich viele Codeblöcke. Als Einstiegssprache verwenden wir Python. Warum ausgerechnet Python? Das erfährst du später genauer.\nCodeblöcke sind deutlich sichtbar vom übrigen Text abgehoben, meist grau hinterlegt und in einer Schreibmaschinenschrift dargestellt, etwa Courier New oder Consolas. Hier ein kleines Beispiel:\n1led.set_rgb_value(0, 0, 0)\n2led.set_rgb_value(255, 255, 255)\n\nprint(\"Diese Zeile hat keine Annotation\")\n\n3# Lasse die LED blau aufleuchten\nled.set_rgb_value(0, 0, 255)\n\n1\n\nSchaltet die LED aus, weil der RGB-Code (0,0,0) schwarz erzeugt.\n\n2\n\nSchaltet die LED auf weißes Licht, weil drei Mal die 255 die Farbe Weiß ergibt.\n\n3\n\nAuch Kommentare sind für kurze Erläuterungen nützlich.\n\n\nKommentare sind mit einer kleinen Zahl versehen. Wenn du die Online-Version nutzt und mit der Maus über diese Zahl fährst, erscheint ein Tooltip, der die Codezeile erklärt. Das funktioniert nur online, nicht in PDF oder Druckversion.\nNoch ein kleiner Tipp: Wenn du mit der Maus über den Codeblock fährst, siehst du rechts oben ein Clipboard-Symbol. Ein Klick darauf kopiert den Code direkt in deine Zwischenablage, und du kannst ihn problemlos in dein geöffnetes Visual Studio Code oder eine andere IDE einfügen und ausprobieren.\nAlle Codebeispiele findest du außerdem im GitHub-Repository, das zu diesem Buch gehört.\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "Vorwort"
    ]
  },
  {
    "objectID": "the-project.html",
    "href": "the-project.html",
    "title": "Das LiFi-Projekt",
    "section": "",
    "text": "Hands-On Programmieren lernen\nHast du dich schon einmal gefragt, wie man Informationen über Licht übertragen kann? Das klingt vielleicht nach Science-Fiction, ist aber tatsächlich machbar – und genau das wollen wir im LiFi-Projekt herausfinden! Dabei werden wir mit insgesamt acht spannenden Geräten arbeiten, die dir unterschiedliche Facetten der digitalen Welt näherbringen und dir gleichzeitig ermöglichen, das Programmieren spielerisch zu erlernen.\nHier ein Überblick über die Geräte, mit denen wir gemeinsam experimentieren werden. Zusammengefasst kosten alle Komponenten für das LiFi-Projekt 249 €. Aber keine Sorge: Wenn du das LiFi-Projekt im Rahmen meines Moduls „Digitalisierung und Programmierung“ an der Hochschule Osnabrück belegst, erhältst du für das gesamte Semester ein komplettes Hardware-Kit.",
    "crumbs": [
      "Das LiFi-Projekt"
    ]
  },
  {
    "objectID": "the-project.html#hands-on-programmieren-lernen",
    "href": "the-project.html#hands-on-programmieren-lernen",
    "title": "Das LiFi-Projekt",
    "section": "",
    "text": "Abbildung 1: Foto eines LiFi-Prototypen\n\n\n\n\n\n\n\nWas?\nBauteil\nAnzahl\nPreis pro Stück\n\n\n\n\nBunte LED\nRGB LED Bricklet 2.0\n1\n8 €\n\n\nButton mit integrierter, bunter LED\nRGB LED Button Bricklet\n1\n15 €\n\n\nLicht- und Farbsensor\nColor Bricklet 2.0\n1\n17 €\n\n\nLCD Touchdisplay\nLCD 128x64 Bricklet\n1\n33 €\n\n\nPiezo Lautsprecher\nPiezo Speaker Bricklet 2.0\n1\n19 €\n\n\nInfrarot-Entfernungsmesser\nDistance IR 4-30cm Bricklet 2.0\n1\n20 €\n\n\nAnaloger Spannungssensor\nAnalog In Bricklet 3.0\n1\n14 €\n\n\nSchalldruckpegelsenor\nSound Pressure Level Bricklet\n1\n35 €\n\n\nMikrocontroller\nMaster Brick 3.2\n2\n35 €\n\n\nAnschlusskabel 15 cm\nBricklet Kabel 15cm (7p-7p)\n8\n1 €\n\n\nUSB-A- auf USB-C Kabel\nUSB-A auf USB-C Kabel 100 cm\n1\n6 €\n\n\nMontageplatte\nMontageplatte 22x22 (12x12cm)\n2\n7 €\n\n\nSchrauben, Abstandshalter und Muttern\nBefestigungskit 12mm\n4\n2 €",
    "crumbs": [
      "Das LiFi-Projekt"
    ]
  },
  {
    "objectID": "the-project.html#unser-gemeinsames-ziel-kommunikation-über-licht",
    "href": "the-project.html#unser-gemeinsames-ziel-kommunikation-über-licht",
    "title": "Das LiFi-Projekt",
    "section": "Unser gemeinsames Ziel: Kommunikation über Licht",
    "text": "Unser gemeinsames Ziel: Kommunikation über Licht\nWie schafft man es eigentlich, dass zwei Geräte miteinander kommunizieren – ganz ohne WLAN, Bluetooth oder Kabel, sondern einfach nur mit Licht? Eine spannende Frage, auf die wir im LiFi-Projekt gemeinsam Antworten finden werden. Die Grundlage dafür bilden vor allem die bunte LED und der Licht- und Farbsensor. Schritt für Schritt – und Kapitel für Kapitel – werden wir an unserem gemeinsamen Ziel arbeiten, ein funktionierendes Prototypen-System aufzubauen. Dabei lernst du nicht nur, wie man Hardware-Komponenten miteinander verbindet, sondern vor allem auch, wie man Computer – diese universellen Problemlösungsmaschinen – für eigene Ideen programmieren kann.",
    "crumbs": [
      "Das LiFi-Projekt"
    ]
  },
  {
    "objectID": "the-project.html#frust-ist-dein-freund-zumindest-ein-bisschen",
    "href": "the-project.html#frust-ist-dein-freund-zumindest-ein-bisschen",
    "title": "Das LiFi-Projekt",
    "section": "Frust ist dein Freund – zumindest ein bisschen",
    "text": "Frust ist dein Freund – zumindest ein bisschen\nEins möchte ich gleich vorwegnehmen: Beim Programmierenlernen ist eine gewisse Portion Frust unvermeidbar. Klingt unangenehm? Ist es auch! Aber es ist zugleich Teil eines enorm wertvollen Lernprozesses. Jeder Fehler, den du machst, ist eine Gelegenheit, um zu verstehen, wie Computer wirklich funktionieren – nämlich absolut präzise und ohne jede Toleranz für Fehler.\nComputer sind gnadenlose Lehrer. Sie zeigen dir sofort und unerbittlich, wenn etwas nicht stimmt – sei es ein vergessener Punkt, ein falscher Buchstabe oder ein simpler Zahlendreher. Das kann frustrieren, aber genau dieses direkte und sofortige Feedback hilft dir auch, schnell und effektiv zu lernen. Sobald du verstehst, wie du aus Fehlermeldungen sinnvolle Schlüsse ziehst und deine Programme entsprechend korrigierst, wirst du belohnt – mit Erfolgserlebnissen und einer steilen Lernkurve.\nAlso, wenn mal etwas nicht klappt: Nimm es nicht persönlich, sondern sieh es als Herausforderung. Atme tief durch, mach dir klar, dass Fehler unvermeidbar und sogar wichtig sind, und probier es noch einmal. Ich verspreche dir: Es lohnt sich!",
    "crumbs": [
      "Das LiFi-Projekt"
    ]
  },
  {
    "objectID": "the-project.html#some-assembly-required",
    "href": "the-project.html#some-assembly-required",
    "title": "Das LiFi-Projekt",
    "section": "Some Assembly Required",
    "text": "Some Assembly Required\nDas LiFi-Projekt beginnt mit dem Zusammenbau der Komponenten. Dazu bekommst du im folgenden Kapitel eine detaillierte Anleitung. Also, Schraubendreher in die Hand und auf geht’s.\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "Das LiFi-Projekt"
    ]
  },
  {
    "objectID": "assembly.html",
    "href": "assembly.html",
    "title": "Bastelanleitung",
    "section": "",
    "text": "Kommt bald\n\n\n\nDieses Kapitel ist in Arbeit und wird in Kürze fertiggestellt.\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "Bastelanleitung"
    ]
  },
  {
    "objectID": "on-or-off.html",
    "href": "on-or-off.html",
    "title": "1  An oder Aus",
    "section": "",
    "text": "1.1 Experimentaufbau\nFür unser Experiment in diesem Kapitel benötigen wir den Button mit der integrierten LED (RGB LED Button 2.0), den wir an den Mikrocontroller (Master Brick 3.2) anschließen. Beides fixieren wir auf Abstandshaltern auf einer Montageplatte, wie in Abbildung 1.1 gezeigt. Damit es schneller geht, verwenden wir lediglich zwei Fixierungen pro Gerät, was eine ausreichende Stabilität gewährleistet. Vergiss nicht die weißen Unterlegscheiben aus Kunsstoff, um die Platinen zu schonen.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>An oder Aus</span>"
    ]
  },
  {
    "objectID": "on-or-off.html#experimentaufbau",
    "href": "on-or-off.html#experimentaufbau",
    "title": "1  An oder Aus",
    "section": "",
    "text": "Abbildung 1.1: Einfaches Setup mit Mikrocontroller und Button mit integrierter LED.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>An oder Aus</span>"
    ]
  },
  {
    "objectID": "on-or-off.html#einfacher-geht-es-nicht",
    "href": "on-or-off.html#einfacher-geht-es-nicht",
    "title": "1  An oder Aus",
    "section": "1.2 Einfacher geht es nicht",
    "text": "1.2 Einfacher geht es nicht\nEin Button ist ein denkbar einfaches Gerät: Es kennt nur zwei Zustände, entweder ist der Button gedrückt oder nicht. Wenn du den Master Brick über das USB-Kabel an deinen Computer angeschlossen hast, kannst du die Funktion des Buttons einfach über den Brick Viewer kennenlernen. Öffne dazu den Brick Viewer und klicke auf den Connect-Button.\n\n\n\n\n\n\nAbbildung 1.2: Über den Connect-Button verbindet sich der Brick Viewer mit dem angeschlossenen Master Brick.\n\n\n\nNachdem du verbunden bist sollte der angeschlossene Master Brick mit seinen Komponenten, die Bricklets genannt werden, im Brick Viewer sichtbar sein. In Abbildung 1.3 siehst du wie das in meinem Fall aussieht. Für jedes Gerät wird ein eigener Tab angezeigt, in dem wir die Details zu diesem Gerät sehen und die jeweiligen Funktionen ausprobieren können. Gleichzeitig bekommen wir in der Mitte des Brick Viewers eine übersichtliche Liste mit allen gefundenen Geräten angezeigt. Durch die hierarchische Darstellung erkennst du, welches Bricklet an welchem Mikrocontroller (Master Brick) hängt. Wie wir später im Buch noch sehen werden können auch mehrer Master Bricks miteinander verbunden werden und somit die möglichen angeschlossenen Bricklets um vier erweitert werden.\n\n\n\n\n\n\nAbbildung 1.3: Der Brick Viewer nachdem ihr mit dem Master Brick verbunden seid.\n\n\n\nWechseln wir in den Tab für den Button, in dem wir sämtliche Funktionen des Bricklets einsehen und interaktive ausprobieren können.\n\n\n\n\n\n\nAbbildung 1.4: Die Ansicht für den RGB LED Button im Brick Viewer, in der alle Funktionen per Klick im Zugriff sind.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>An oder Aus</span>"
    ]
  },
  {
    "objectID": "on-or-off.html#das-ganze-jetzt-in-python",
    "href": "on-or-off.html#das-ganze-jetzt-in-python",
    "title": "1  An oder Aus",
    "section": "1.3 Das Ganze jetzt in Python",
    "text": "1.3 Das Ganze jetzt in Python\nWie versprochen starten wir direkt mit unserem ersten kleinen Python-Programm:\n1from tinkerforge.ip_connection import IPConnection\n2from tinkerforge.bricklet_dual_button import DualButton\n\n3ipcon = IPConnection()\n4ipcon.connect(\"localhost\", 4223)\n5btn = DualButton(\"vSY\", ipcon)\n\n1\n\nImportieren des Objekts zum Herstellen einer Verbindung mit dem Master Brick.\n\n2\n\nImportieren des Objekts zur Darstellung des Dual Buttons als Python-Objekt.\n\n3\n\nEine neue Instanz einer IP-Verbindung erstellen.\n\n4\n\nEine Verbindung zu angeschlossenen Master Brick herstellen.\n\n5\n\nEine virtuelle Instanz des Dual Button Bricklets in unserem Programm erzeugen.\n\n\n\nDas Binärsystem\nBits, Bytes etc.\n\nThe concept of a switch with its two states is very important to the field of computer science. That’s why introduce it early in this book.\n\nIntroduce the dual button\nIntroduce the boilerplate code necessary to connect to the button\nAs as side note, introduce programs and how to write and run them with VS code\nShow how we can either press the button or not and how to read its current state from our first simple program\nLeave the chapter with some intriguing questions about the meaning of 0 and 1 in computer science\n\n🎮 Mini Reaction Game\nTheme: “Are you faster than a computer?”\nSetup:\n\nFlash an LED randomly after a delay, and students must press the correct button as fast as possible.\nWrong button or slow response → “fail” message.\nDisplay or rank response times.\n\nTeachable moment: Real-time input processing, event handling, and how computers handle asynchronous input.\n🧠 Bonus Concept: Binary Memory Challenge\nTheme: “Simon Says: Binary Edition”\nSetup:\n\nSystem shows a sequence of binary numbers via LED flashes (e.g., 01 → left off, right on).\nStudents must repeat the sequence by pressing the buttons.\nEach round adds another number.\n\nTeachable moment: Binary perception, memory, encoding sequences, and reinforcing input logic.\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>An oder Aus</span>"
    ]
  },
  {
    "objectID": "colors.html",
    "href": "colors.html",
    "title": "2  Farben",
    "section": "",
    "text": "Setup\nFür dieses Kapitel benötigen wir zusätzlich zum Button mit integrierter LED (RGB LED Button 2.0) noch die separate LED (RGB LED Bricklet 2.0), die wir ebenfalls an den Mikrocontroller (Master Brick 3.2) anschließen. Alle Geräte fixieren wir auf einer Montageplatte, wie in der Abbildung gezeigt.\nDenke daran, wie Ampeln Farben verwenden, um wichtige Informationen zu vermitteln – Rot bedeutet Stopp, Grün bedeutet Los, und Gelb bedeutet Vorsicht. Genauso werden auf deinem Computer oder Smartphone überall Farben eingesetzt: Schaltflächen werden blau, wenn du mit der Maus darüber fährst, Benachrichtigungen erscheinen vielleicht in Rot, und Apps nutzen verschiedene Farben, um dir die Navigation zu erleichtern. All diese Farben werden mit Systemen wie RGB erzeugt und gesteuert.\nFarben sind auch in Bildern und Videos unverzichtbar. Jedes Foto, das du auf deinem Bildschirm siehst, besteht aus winzigen Punkten, den sogenannten Pixeln, und die Farbe jedes Pixels wird mit dem RGB-System festgelegt. Wenn du ein Video anschaust, zeigt dein Gerät schnell hintereinander eine Folge von Bildern, die jeweils aus Millionen farbiger Pixel bestehen, um eine Bewegung vorzutäuschen. Durch das Mischen unterschiedlicher Mengen von Rot, Grün und Blau für jedes Pixel können Computer realistische Fotos, lebendige Animationen und naturgetreue Videos darstellen.\nDas RGB-System steht für Rot, Grün und Blau – die Grundfarben des Lichts. Durch das Kombinieren dieser drei Farben in unterschiedlichen Intensitäten können wir ein breites Farbspektrum erzeugen. Dieses System wird auf Computerbildschirmen, in digitaler Kunst und beim Programmieren verwendet, um Farben zu definieren und zu steuern.\nZum Beispiel ermöglicht uns das RGB-System beim Programmieren, die Farbe einer LED oder einer Grafik festzulegen, indem wir angeben, wie viel Rot, Grün und Blau gemischt werden sollen. Jede Farbkomponente – Rot, Grün und Blau – erhält einen Wert von 0 (keine Intensität) bis 255 (volle Intensität). Durch die Auswahl verschiedener Werte für jede Komponente können wir jede beliebige Farbe erzeugen.\nProgrammierkonzepte:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Farben</span>"
    ]
  },
  {
    "objectID": "colors.html#setup",
    "href": "colors.html#setup",
    "title": "2  Farben",
    "section": "",
    "text": "Kommt bald\n\n\n\nDieses Kapitel ist in Arbeit und wird in Kürze fertiggestellt.\n\n\n\n\n\n\n\n\nExperiment\n\n\n\nProgrammieren der LED, die in verschiedenen Farben aufleuchten soll. Jeder Farbe ist eine Taste auf der Tastatur zugeordnet, die der Spieler so schnell wie möglich drücken muss, nachdem die LED in der jeweiligen Farbe aufleuchtet.\nDas Programm kann zunächst linear ablaufen - also zunächst nur eine Runde, dann zwei kopiert hintereinander, bis zur Einführung einer Schleife.\n\n\n1from tinkerforge.ip_connection import IPConnection\n2from tinkerforge.bricklet_rgb_led_v2 import BrickletRGBLEDV2\n\n3ipcon = IPConnection()\n4ipcon.connect(\"localhost\", 4223)\n5btn = BrickletRGBLEDV2(\"abC\", ipcon)\n\n1\n\nImportieren des Objekts zum Herstellen einer Verbindung mit dem Master Brick.\n\n2\n\nImportieren des Objekts zur Darstellung der RGB LED als Python-Objekt.\n\n3\n\nEine neue Instanz einer IP-Verbindung erstellen.\n\n4\n\nEine Verbindung zu angeschlossenen Master Brick herstellen.\n\n5\n\nEine virtuelle Instanz des RGB LED Bricklets in unserem Programm erzeugen.\n\n\n\n\n\n\n\nEinführung RGB-LED\nEinführung: Sie kann auf jede beliebige Farbe eingestellt werden\nEinführung des RGB-Systems als DAS Codesystem zur Darstellung von Farben im Computer (ohne zu sehr auf Binärzahlen einzugehen)\n\n\n\nFunktionsparameter (set_rgb_value(r, g, b))\n\nled.set_rgb_value(255, 255, 255)\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Farben</span>"
    ]
  },
  {
    "objectID": "text.html",
    "href": "text.html",
    "title": "3  Texte",
    "section": "",
    "text": "Setup\nFür dieses Kapitel benötigen wir die LED (RGB LED Bricklet 2.0) und den Infrarot-Entfernungsmesser Distance IR 4-30cm Bricklet 2.0. Beide Geräte schließen wir an den Mikrocontroller (Master Brick 3.2) and und fixieren alle drei auf einer Montageplatte. Wie in der Abbildung gezeigt, soll der Entfernungsmesser dabei nach oben zeigen.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Texte</span>"
    ]
  },
  {
    "objectID": "text.html#setup",
    "href": "text.html#setup",
    "title": "3  Texte",
    "section": "",
    "text": "Kommt bald\n\n\n\nDieses Kapitel ist in Arbeit und wird in Kürze fertiggestellt.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Texte</span>"
    ]
  },
  {
    "objectID": "text.html#texte-ganz-ohne-tastatur",
    "href": "text.html#texte-ganz-ohne-tastatur",
    "title": "3  Texte",
    "section": "3.1 Texte – ganz ohne Tastatur?",
    "text": "3.1 Texte – ganz ohne Tastatur?\nJa, ich gebe zu: Eine Tastatur ist schon richtig praktisch. Schnell tippen wir damit Buchstaben, Zahlen, Satz- und Sonderzeichen (wie neue Zeilen und Leerzeichen) ein. Aber stell dir mal vor: Wie könnte ich eigentlich dieses Buch schreiben, wenn ich keine Tastatur hätte?\nTatsächlich gibt es spannende Alternativen! Hast du schon mal versucht, Texte zu diktieren? Google Docs oder Microsoft Word bieten mittlerweile ziemlich gute Möglichkeiten dafür. Anfangs fühlt sich das ungewohnt an, aber ich kenne Menschen, die darauf schwören und damit sogar produktiver sind.\nHeute wollen wir aber bewusst einmal einen Schritt zurückgehen und das Tippen absichtlich erschweren. Klingt komisch? Macht aber Sinn! Denn wenn wir das Eingeben von Texten schwieriger gestalten, lernen wir einerseits, unsere Tastaturen wieder richtig zu schätzen. Andererseits verstehen wir dann besser, wie Texte im Hintergrund verarbeitet und gespeichert werden.\nWie wäre es also mit einer Tastatur, die auf Handgesten basiert? Klingt verrückt? Perfekt – genau das machen wir!",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Texte</span>"
    ]
  },
  {
    "objectID": "text.html#klein-anfangen-ein-einfacher-button-mit-handgesten",
    "href": "text.html#klein-anfangen-ein-einfacher-button-mit-handgesten",
    "title": "3  Texte",
    "section": "3.2 Klein anfangen: Ein einfacher Button mit Handgesten",
    "text": "3.2 Klein anfangen: Ein einfacher Button mit Handgesten\nStarten wir ganz simpel. Wir bauen zuerst eine Art “Knopf” oder Button, der auf Handgesten reagiert. Dafür verwenden wir einen der Infrarot-Abstandssensoren – oder wie er bei Tinkerforge heißt: Distance IR 4-30cm Bricklet 2.0. Wie der Name schon sagt, misst der Sensor Entfernungen von 4 bis maximal 30 cm.\nUm den Sensor in unserem Programm zu nutzen, können wir ganz entspannt den Grundcode (Boilerplate-Code) aus den vorherigen Kapiteln übernehmen. Nur zwei kleine Anpassungen brauchen wir noch speziell für unseren Sensor:\n\nfrom tinkerforge.ip_connection import IPConnection\n1from tinkerforge.bricklet_distance_ir_v2 import BrickletDistanceIRV2\n\nip_con = IPConnection()\nip_con.connect(\"localhost\", 4223)\n\n2ir_sensor = BrickletDistanceIRV2(\"\", ip_con)\n\n\n1\n\nHier importieren wir die Klasse für den IR-Sensor.\n\n2\n\nHier erzeugen wir eine konkrete Instanz und verbinden uns mit dem angeschlossenen Sensor. Vergiss nicht, deine UID hier einzutragen!\n\n\n\n\nWas kann der Sensor? Eigentlich hat er nur eine Funktion:\n\n1distance = ir_sensor.get_distance()\n2print(f\"Objekt ist {distance/100} cm entfernt\")\n\n\n1\n\nDie Funktion get_distance() fragt den aktuell gemessenen Wert ab.\n\n2\n\nDer Sensor liefert den Wert in Zentimeter * 100 zurück.\n\n\n\n\nAber wie lässt sich mit den Entfernungswert ein Button umsetzen? Dazu vergegenwärtigen wir uns, was ein herkömmlicher Button eigentlich ist und wie er funktioniert. Ein Button, wie wir ihn auf einer Tastatur finden, kennt zwei Zustände: Gedrückt und nicht gedrückt. An oder aus. Wenn wir eine Taste drücken, so schließen wir darüber einen Stromkreis, der in einem winzigen Mikroprozessor mündet. Dieser Prozessor erkennt durch laufendes Scannen sämtlicher Verbindungen zu den Tasten (die als Matrix angeordnet sind), durch welche Kreise Strom fließt und kann so auf die gedrückte Taste schließen. Der Mikroprozessor ermittelt dann anhand der Koordinate in der Matrix einen so gennanten Scan Code, der für jede Taste anders lautet. Dieser Code wird als binäre Folge von Nullen und Einsen über das USB-Kabel an den Computer geschickt und dort von dem aktiven Programm - etwa einer Textverarbeitungssoftware - in ein Codesystem umgewandelt, das Zeichen abbilden kann. So wie etwa das ASCII-Codesystem, das wir weiter unten kennenlernen.\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Texte</span>"
    ]
  },
  {
    "objectID": "images.html",
    "href": "images.html",
    "title": "4  Bilder",
    "section": "",
    "text": "Kommt bald\n\n\n\nDieses Kapitel ist in Arbeit und wird in Kürze fertiggestellt.\n\n\n\n\n\n\n\n\nExperiment\n\n\n\n\nEinführung in die Idee einer Pixelmatrix aus Farbwerten als Bild\nVerwendung des LCD-Displays zur Veranschaulichung, auch wenn nur schwarz/weiß\nVerwendung von Zeichen auf dem LCD, um Pixel-Bitmaps für Schriftarten hervorzuheben\nStudierende nutzen Bitmap-Sheet, um ein eigenes Logo zu entwerfen und auf dem LCD anzuzeigen\n\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bilder</span>"
    ]
  },
  {
    "objectID": "codes.html",
    "href": "codes.html",
    "title": "5  Codes",
    "section": "",
    "text": "Experiment\n\n\n\nMorse-Code über Piezo Speaker\n\nEinführung des Piezo Speaker\nCodesysteme\n\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Codes</span>"
    ]
  },
  {
    "objectID": "conversion.html",
    "href": "conversion.html",
    "title": "6  Umwandlung",
    "section": "",
    "text": "6.1 Der Weg in den Computer",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Umwandlung</span>"
    ]
  },
  {
    "objectID": "conversion.html#aus-der-digitalen-in-die-analoge-welt",
    "href": "conversion.html#aus-der-digitalen-in-die-analoge-welt",
    "title": "6  Umwandlung",
    "section": "6.2 Aus der digitalen in die analoge Welt",
    "text": "6.2 Aus der digitalen in die analoge Welt\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Umwandlung</span>"
    ]
  },
  {
    "objectID": "information.html",
    "href": "information.html",
    "title": "7  Information",
    "section": "",
    "text": "Kommt bald\n\n\n\nDieses Kapitel ist in Arbeit und wird in Kürze fertiggestellt.\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Information</span>"
    ]
  },
  {
    "objectID": "sensors.html",
    "href": "sensors.html",
    "title": "8  Sensoren",
    "section": "",
    "text": "Aufgaben",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Sensoren</span>"
    ]
  },
  {
    "objectID": "sensors.html#aufgaben",
    "href": "sensors.html#aufgaben",
    "title": "8  Sensoren",
    "section": "",
    "text": "Programmiere einen Batteriedoktor mithilfe des Analog In Sensors\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Sensoren</span>"
    ]
  },
  {
    "objectID": "signals.html",
    "href": "signals.html",
    "title": "9  Signale",
    "section": "",
    "text": "9.1 Pulsmesser: Dein Finger als Signalquelle\nHast du dich schon einmal gefragt, wie dein Fitness-Tracker deinen Puls messen kann, obwohl du nur einen Finger auflegst? Diese Frage führt uns direkt zu einem spannenden Konzept: Signalen. Alles, was wir mit Sensoren messen, sind zunächst einmal beliebige Größen. Doch nicht alles, was wir messen, ist für uns relevant. Wir suchen nach Mustern in diesen Daten — eben genau diesen Mustern, die wir als Signale bezeichnen. Alles andere, was uns von diesen Signalen ablenkt, nennen wir Rauschen. Unser Ziel: Wir möchten herausfinden, wie wir Signale effektiv vom Rauschen unterscheiden können.\nErinnerst du dich noch an den Farbsensor aus Kapitel 8? Er misst nicht nur die Intensität des RGB-Spektrums, sondern auch die allgemeine Lichtintensität, auch Illuminance genannt. Hier kommt die spannende Tatsache ins Spiel: Genau dieses Prinzip steckt hinter den Pulsmessern in Fitnesstrackern. Ja, genau der Sensor, der Licht misst, verrät dir, wie schnell dein Herz schlägt!\nAber wie genau funktioniert das? Stell dir vor, du legst deinen Zeigefinger direkt auf den Sensor und schaltest die integrierte weiße LED an. Das Licht der LED trifft auf deinen Finger und wird reflektiert. Dein Finger sieht für dich immer gleich aus, aber tatsächlich sorgt dein Herzschlag dafür, dass dein Finger mal minimal heller und mal dunkler erscheint. Das liegt daran, dass Blut in rhythmischen Schüben durch die Gefäße gepumpt wird. Diese winzigen Veränderungen, die du mit bloßem Auge nicht sehen kannst, werden vom sensiblen Farbsensor deutlich wahrgenommen.\nSchauen wir uns das einmal genauer an: Wenn du dir die gemessene Lichtintensität über den Zeitverlauf im Brick Viewer ansiehst, kannst du deinen Pulsschlag tatsächlich erkennen—er wird sichtbar als kleine, regelmäßige Ausschläge oder Peaks. Faszinierend, oder? So kannst du beobachten, wie aus etwas so scheinbar Einfachem wie Licht ein Signal entsteht, das dir Informationen über deinen Körper liefert.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Signale</span>"
    ]
  },
  {
    "objectID": "signals.html#pulsmesser-dein-finger-als-signalquelle",
    "href": "signals.html#pulsmesser-dein-finger-als-signalquelle",
    "title": "9  Signale",
    "section": "",
    "text": "Abbildung 9.1: Dein Puls im Brick Viewer",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Signale</span>"
    ]
  },
  {
    "objectID": "signals.html#vom-diagramm-zur-zahl",
    "href": "signals.html#vom-diagramm-zur-zahl",
    "title": "9  Signale",
    "section": "9.2 Vom Diagramm zur Zahl",
    "text": "9.2 Vom Diagramm zur Zahl\nAuch wenn du das Signal im Liniendiagramm in Abbildung 9.1 bereits deutlich sehen kannst, bleibt eine spannende Herausforderung bestehen: Wie schreibst du ein Programm, das aus diesen Daten deinen Puls als konkrete Zahl, zum Beispiel “60 Schläge pro Minute”, berechnet? Genau dafür sind wir ja hier – um herauszufinden, wie man solche kniffligen Aufgaben löst. Lass uns gemeinsam starten!\nZunächst müssen wir den Farbsensor in unserem Python-Programm auslesen. Den notwendigen Code dafür haben wir im vorherigen Kapitel 8 bereits kennengelernt.\n\nfrom tinkerforge.ip_connection import IPConnection\nfrom tinkerforge.bricklet_color_v2 import BrickletColorV2\n\nip_con = IPConnection()\nip_con.connect(\"localhost\", 4223)\n\n1color_sensor = BrickletColorV2(\"Wgn\", ip_con)\n\n\n1\n\nAchtung: Vergiss nicht, hier deine eigene UID einzusetzen. Diese findest du im Brick Viewer.\n\n\n\n\nJetzt haben wir Zugriff auf die Funktionen des Sensors und können etwa die Lichtintensität messen:\n\n1color_sensor.set_light(True)\n2color_sensor.set_configuration(1, 1)\nilluminance = color_sensor.get_illuminance()\n\n\n1\n\nSchaltet die integrierte LED des Sensors an.\n\n2\n\nStellt die Werte für Gain und Integration Time auf 4x und 24ms. Diese Einstellung scheinen gut zu funktionieren, um den Puls zu messen.\n\n\n\n\nDer zurückgegebene Wert hängt von zwei Einstellungen ab: Gain (Verstärkung) und Integration Time (Messzeit). Je länger die Messzeit, desto genauer die Werte – allerdings können dann weniger Messungen pro Sekunde durchgeführt werden. Laut Dokumentation können wir aus dem gemessenen Wert die Lichtintensität in Lux wie folgt berechnen:\n\n1illuminance_lux = illuminance * 700 / 4 / 24\n\n\n1\n\nDer Wert 4 beschreibt ein 4-fache Verstärkung (Gain) und die 24 steht für 24ms Integration Time\n\n\n\n\nUm deinen Puls zu berechnen, müssen wir jetzt mehrere Werte in kurzen Abständen messen. Warum? Weil wir die regelmäßigen Tief- und Hochpunkte erkennen wollen. Ein Tiefpunkt entsteht, wenn dein Finger am dunkelsten ist – hier ist also gerade besonders viel Blut im Finger. Die Hochpunkte markieren dagegen den Moment, in dem das Blut größtenteils wieder zurückgeflossen ist. Jeder Herzschlag erzeugt genau einen Tief- und einen Hochpunkt. Finden wir diese Punkte, können wir einfach die Zeitabstände messen und daraus die Pulsfrequenz berechnen.\nBeginnen wir damit, unsere Messungen in einer Schleife durchzuführen. Das ist eine praktische Methode, kontinuierlich Daten zu erfassen:\n\nwhile True:\n    illuminance = color_sensor.get_illuminance()\n    illuminance_lux = illuminance * 700 / 4 / 24\n    print(f\"Lichtintensität in Lux: {illuminance_lux}\")\n\nLass uns das Programm einmal ausprobieren. Es sieht aktuell so aus:\n\nfrom tinkerforge.ip_connection import IPConnection\nfrom tinkerforge.bricklet_color_v2 import BrickletColorV2\n\nip_con = IPConnection()\nip_con.connect(\"localhost\", 4223)\n\n1color_sensor = BrickletColorV2(\"Wgn\", ip_con)\ncolor_sensor.set_light(True)\ncolor_sensor.set_configuration(1, 1)\n\nwhile True:\n    illuminance = color_sensor.get_illuminance()\n    illuminance_lux = illuminance * 700 / 4 / 24\n2    print(f\"Lichtintensität in Lux: {illuminance_lux:.2f}  \", end=\"\\r\")\n\n\n1\n\nDenke daran, die UID durch die deines Sensors zu ersetzen.\n\n2\n\nDer Parameter end=\"\\r\" sorgt dafür, dass nicht jede Ausgabe in eine neue Zeile geschrieben wird. Stattdessen wird immer an den Anfang der selben Zeile gesprungen. Das \\r ist das Symbol für Carriage Return.\n\n\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Signale</span>"
    ]
  },
  {
    "objectID": "protocols.html",
    "href": "protocols.html",
    "title": "10  Protokolle",
    "section": "",
    "text": "Kommt bald\n\n\n\nDieses Kapitel ist in Arbeit und wird in Kürze fertiggestellt.\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Protokolle</span>"
    ]
  },
  {
    "objectID": "encryption.html",
    "href": "encryption.html",
    "title": "11  Verschlüsselung",
    "section": "",
    "text": "Kommt bald\n\n\n\nDieses Kapitel ist in Arbeit und wird in Kürze fertiggestellt.\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Verschlüsselung</span>"
    ]
  },
  {
    "objectID": "algorithms.html",
    "href": "algorithms.html",
    "title": "12  Algorithmen",
    "section": "",
    "text": "Kommt bald\n\n\n\nDieses Kapitel ist in Arbeit und wird in Kürze fertiggestellt.\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Algorithmen</span>"
    ]
  },
  {
    "objectID": "compression.html",
    "href": "compression.html",
    "title": "13  Kompression",
    "section": "",
    "text": "Kommt bald\n\n\n\nDieses Kapitel ist in Arbeit und wird in Kürze fertiggestellt.\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Kompression</span>"
    ]
  },
  {
    "objectID": "computer.html",
    "href": "computer.html",
    "title": "14  Computer",
    "section": "",
    "text": "14.1 Logik und Arithmetik",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Computer</span>"
    ]
  },
  {
    "objectID": "computer.html#logik-und-arithmetik",
    "href": "computer.html#logik-und-arithmetik",
    "title": "14  Computer",
    "section": "",
    "text": "Logikgatter\n8-Bit-Additionsmaschine\nSubtraktion, Division, Multiplikation",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Computer</span>"
    ]
  },
  {
    "objectID": "computer.html#die-von-neumann-architektur",
    "href": "computer.html#die-von-neumann-architektur",
    "title": "14  Computer",
    "section": "14.2 Die von-Neumann-Architektur",
    "text": "14.2 Die von-Neumann-Architektur",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Computer</span>"
    ]
  },
  {
    "objectID": "computer.html#der-arbeitsspeicher-oder-das-kurzzeitgedächtnis-des-computers",
    "href": "computer.html#der-arbeitsspeicher-oder-das-kurzzeitgedächtnis-des-computers",
    "title": "14  Computer",
    "section": "14.3 Der Arbeitsspeicher oder das Kurzzeitgedächtnis des Computers",
    "text": "14.3 Der Arbeitsspeicher oder das Kurzzeitgedächtnis des Computers\n\nx = 10\nprint(f\"Adresse im Speicher der Variable 'x': {hex(id(x))}\")\nx= 20\nprint(f\"Neue Adresse im Speicher der Variable 'x': {hex(id(x))}\")\n\nAdresse im Speicher der Variable 'x': 0x7fffea237448\nNeue Adresse im Speicher der Variable 'x': 0x7fffea237588\n\n\n\nnames = [\"Max\", \"Kim\", \"Hildegard\"]\nprint(f\"Adresse im Speicher der Variable 'names': {hex(id(names))}\")\nnames.append(\"Heinrich\")\nprint(f\"Die Adresse im Speicher der Variable 'names' bleibt identisch: {hex(id(names))}\")\n\nAdresse im Speicher der Variable 'names': 0x2596e720900\nDie Adresse im Speicher der Variable 'names' bleibt identisch: 0x2596e720900\n\n\n\n\n\n\n\n\nLeseempfehlung\n\n\n\nUm tiefer in die Themen dieses Kapitels einzusteigen, empfehle ich euch Petzold (2022) zu lesen . Es lohnt sich, das Buch von Vorne nach Hinten zu verschlingen.\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Computer</span>"
    ]
  },
  {
    "objectID": "problems.html",
    "href": "problems.html",
    "title": "15  Probleme",
    "section": "",
    "text": "Kommt bald\n\n\n\nDieses Kapitel ist in Arbeit und wird in Kürze fertiggestellt.\n\n\n\n\n\n\nAdami, Christoph. 2016. „What is Information?“ Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, und Dennis Brylow. 2020. Computer science: an overview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: the hidden language of computer hardware and software. 2. Aufl. Hoboken: Microsoft Press.\n\n\nPólya, George, und John Horton Conway. 2004. How to solve it: a new aspect of mathematical method. Expanded Princeton Science Library ed. Princeton science library. Princeton [N.J.]: Princeton University Press.\n\n\nScott, John C. 2009. But how do it know?: the basic principles of computers for everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Probleme</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Literaturverzeichnis",
    "section": "",
    "text": "Adami, Christoph. 2016. “What Is Information?”\nPhilosophical Transactions of the Royal Society A: Mathematical,\nPhysical and Engineering Sciences 374 (2063): 20150230. https://doi.org/10.1098/rsta.2015.0230.\n\n\nBrookshear, J. Glenn, and Dennis Brylow. 2020. Computer Science: An\nOverview. 13th edition, global edition. NY, NY: Pearson.\n\n\nPetzold, Charles. 2022. Code: The Hidden Language of Computer\nHardware and Software. 2nd ed. Hoboken: Microsoft Press.\n\n\nPólya, George, and John Horton Conway. 2004. How to Solve It: A New\nAspect of Mathematical Method. Expanded Princeton Science Library\ned. Princeton Science Library. Princeton [N.J.]: Princeton University\nPress.\n\n\nScott, John C. 2009. But How Do It Know?: The Basic Principles of\nComputers for Everyone. Oldsmar, FL: John C. Scott.",
    "crumbs": [
      "Literaturverzeichnis"
    ]
  }
]